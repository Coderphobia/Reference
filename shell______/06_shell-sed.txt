一、sed
 
sed (stream editor)

1. Sed简介

sed是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。

用法: sed [选项]... {脚本(如果没有其他脚本)} [输入文件]...

 
简单演示
[root@teacher ~]# sed 'p' /etc/passwd   p每一行打印两行
ｓｅｄ的逐行操作。
[chuyue@teacher sedtest]$ cat /etc/passwd |sed 'p'


有root的行打印两行，其他一行

[root@teacher ~]# sed '/root/p' /etc/passwd    有root的行打印两行，其他一行

 
[root@teacher ~]# sed -n '/root/p' /etc/passwd    只打印有root的行
 
 
2. 常用选项：
 
-n : 取消默认的回显（只回显符合条件的行）。
-e : 将-ｅ后面的字符看作是操作脚本，如果只有一个操作脚本，-ｅ可以省略。
-f : ｓｅｄ的脚本来自于文件
-i : 直接修改文件
-r : 支持扩展的正则表达式
--follow-symlinks  跟踪符号链接


举例：

[root@teacher ~]# sed -n -e '/root/p' -e '/chuyue/p' /etc/passwd
[root@teacher ~]# sed -n -e '/root/p;/chuyue/p' /etc/passwd

[root@teacher ~]# sed -i  '/^$/d' grep.txt

3.sed操作命令

a 在当前行后面加入一行文本。  ＊
b lable  分支到脚本中带有标记的地方，如果标记不存在则分支到脚本的末尾。
c 用新的文本改变本行的文本。  ＊
d 从模板块（Pattern space）位置删除行。  ＊
D 删除模板块的第一行。
i 在当前行上面插入文本。  ＊
h 拷贝模板块的内容到内存中的缓冲区。
H 追加模板块的内容到内存中的缓冲区
g 获得内存缓冲区的内容，并替代当前模板块中的文本。*
G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。*
l 列表不能打印字符的清单。
n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。*
N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。*
p 打印模板块的行。 ＊
P（大写）打印模板块的第一行。
q 退出Sed。
r file  从file中读行。
t label  if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
T label   错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
w file    写并追加模板块到file末尾。
W file    写并追加模板块的第一行到file末尾。
!  表示后面的命令对所有没有被选定的行发生作用。 ＊
s/re/string   用string替换正则表达式re。 ＊
=   打印当前行号码。 ＊
#   把注释扩展到下一个换行符以前。


以下的是替换标记

        g表示行内全面替换。

        p表示打印行。

        w表示把行写入一个文件。

        x表示互换模板块中的文本和缓冲区中的文本。

        y表示把一个字符翻译为另外的字符（但是不用于正则表达式）替换长度必须相同，替换成的东西必须明确。

4. 地址定位
可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。

first~step  从fist行开始，循环时每次步进为step ，当first为零时，等于step。
$ 每一行的末尾
/regexp/  匹配该正则表达式的行
\cregexpc 匹配该正则表达式的行，c可以是任意字符
0，addr2   从匹配第一个地址开始，到addr2。
addr1,+N  匹配addr1和addr1后面的N行
addr1,~N  匹配addr1和addr1后面的直到行号等于N的行。

5.举例：

[chuyue@teacher sedtest]$ cp /etc/passwd /tmp/sedtest/passwdbk

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed  '2~3a test00'
a 在当前行后面加入一行文本

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed  '$c test00'

在最后一行用test00替换原来的内容。

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed  '/root/d'
有root的行把它删除

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed  '1i \\t\t passwd document'
\t表示tab健，\\t第一个\表示脱意特殊字符\，本题的意思是给文档加一个标题passwd document,1i是在第一行上面插入文本。\t表示空格,\t越多，空格越大。

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed -n '\a[0-9]\{5\}a p'
[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed -n '\#[0-9]\{5\}# p'

前面两句的结果相同，这说明\cregexpc，匹配该正则表达式的行，c可以是任意字符，结果都一样


[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed -n '1,5 p'

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed -n '2,+5 p'

addr1,+N  匹配addr1和addr1后面的N行，即打印第2行和第2行后面的5行，即2～7行。

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed -n '2,~5 p'

 匹配addr1和addr1后面的直到行号等于N的行,即打印从2行开始，直到行号出现5的行。

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed -n '2,+5 !p'

第2行到第7行不打印，其它的打印出来

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed 's/root/ADMIN/g'

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed -n  's/root/ADMIN/gp'
把匹配到root的行替换成ADMIN，并且打印匹配成功的行

[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed   '30,$s/[0-9]/X/g'
[root@foundation9 shell]# cat -n passwd |sed  -n  '30,$s/[0-9]/X/gp'


[chuyue@teacher sedtest]$ cat -n /tmp/sedtest/passwdbk|sed '/:107:/,$s/sbin/SBIN/g'

[chuyue@teacher sedtest]$ sed  '/root/=' passwdbk 
=是打印当前行号码，上面的结果就是有root的行把行号打印出来。

[chuyue@teacher sedtest]$ sed  'y/abcdefghijklmnopkrstuvwxyz/ABCDEFGHIJKLMNOPKRSTUVWXYZ/' passwdbk 

[chuyue@teacher sedtest]$ sed '/root/w 1.txt' passwdbk 

6.使用技巧

[chuyue@teacher sedtest]$ sed 's/^.//' passwdbk  ^表示匹配第一个字符 . 表示任意字符，//表示替换成没有，即删除
[chuyue@teacher sedtest]$ sed 's/.$//' passwdbk  删除最后一个字符
[chuyue@teacher sedtest]$ sed 's/[a-zA-Z]\{1,\}$//' passwdbk 
在正则表达式中，遇到^要从左往右看，遇到$要从后往前看。上面的意思，从每一行的末尾开始，删除所以匹配到的字母，直到不是字母的时候停止，这里就是删除最后一个单词。


[chuyue@teacher sedtest]$ sed 's/ntp/(&)/'  passwdbk   &引用前面搜索到的结果
(ntp):x:38:38::/etc/ntp:/sbin/nologin

[chuyue@teacher sedtest]$ sed 's/^./# &/' passwdbk
以任意字符开头的，前面加#
# root:x:0:0:root:/root:/bin/bash
# bin:x:1:1:bin:/bin:/sbin/nologin

扩展正则表达式
[chuyue@teacher sedtest]$ sed -r 's/^[0-9a-zA-Z]+:x:[0-9]+//' passwdbk
:0:root:/root:/bin/bash
:1:bin:/bin:/sbin/nologin

[chuyue@teacher sedtest]$ sed 's/\(^[0-9a-zA-Z]\{1,\}\)\(:x:\)\([0-9]\{1,\}\)/\3\2\1/' passwdbk    意思是用户名，：x，uid分组变成了1，2，3，用\3\2\1，把用户名和uid交换了位置。

[chuyue@teacher sedtest]$ sed  's/\(^[0-9a-zA-Z-]\{1,\}\)\(:.*:\)\(\/.*$\)/\3\2\1/  ' passwdbk

[chuyue@teacher sedtest]$ sed -n '/^chuyue/s/\/bin\/bash/\/sbin\/nologin/gp' passwdbk
[chuyue@teacher sedtest]$ sed -n '/^chuyue/s#/bin/bash#/sbin/nologin#gp' passwdbk
＃可以是任意字符，来替换/。

[chuyue@teacher sedtest]$ sort -t":" -k3 -nr passwdbk |sed '/:48:/,$s#\/.*$#/bin/csh#'
[chuyue@teacher sedtest]$ sed '/[a-z]:[0-4]\{0,1\}[0-9]\{1\}:/s/\/[a-z]\{1,\}\/[a-z]\{1,\}$/\/bin\/csh/' passwdbk 

[chuyue@teacher sedtest]$ name=chuyue; sed -n "/$name/p" passwdbk
sed使用变量匹配时，要使用双引号。

7. 练习：见exercise目录



